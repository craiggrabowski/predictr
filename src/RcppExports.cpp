// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// originate_intercept_cpp
NumericVector originate_intercept_cpp(int r, NumericVector parameters);
RcppExport SEXP _predictr_originate_intercept_cpp(SEXP rSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(originate_intercept_cpp(r, parameters));
    return rcpp_result_gen;
END_RCPP
}
// accumulate_linear_cpp
NumericMatrix accumulate_linear_cpp(NumericMatrix m, NumericVector parameters, NumericVector v);
RcppExport SEXP _predictr_accumulate_linear_cpp(SEXP mSEXP, SEXP parametersSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(accumulate_linear_cpp(m, parameters, v));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_predictr_originate_intercept_cpp", (DL_FUNC) &_predictr_originate_intercept_cpp, 2},
    {"_predictr_accumulate_linear_cpp", (DL_FUNC) &_predictr_accumulate_linear_cpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_predictr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
